# -*- coding: utf-8 -*-
"""Cats and Dogs Breeds Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A5g04IQpSPr3qPlIofWa__96k4g_xstv
"""

# Instalacja potrzebnych bibliotek
!pip install -q kaggle
!pip install -q matplotlib torchvision

# Załaduj plik kaggle.json (z konta Kaggle)
from google.colab import files
files.upload()

"""
Konfiguracja i pobranie zbioru danych"""

import os

# Konfiguracja
os.environ['KAGGLE_CONFIG_DIR'] = '/content'

# Pobranie zbioru danych
!kaggle datasets download -d zippyz/cats-and-dogs-breeds-classification-oxford-dataset
!unzip -q cats-and-dogs-breeds-classification-oxford-dataset.zip -d dataset



"""### 🟩 Kafelek 5 Wczytanie i analiza struktury zbioru danych"""

from pathlib import Path
import re

dataset_path = Path('dataset')

# Funkcja do wydobywania klasy z nazwy pliku
def extract_class_name(filename):
    return re.match(r"([a-zA-Z_]+)_\d+\.jpg", filename).group(1)

# Poprawiona ścieżka
all_images = list((dataset_path / 'images' / 'images').glob('*.jpg'))
print(f"Łączna liczba obrazów: {len(all_images)}")

# Lista klas
classes = sorted({extract_class_name(img.name) for img in all_images})
print(f"Znalezione klasy: {classes}")

"""### 🟩Kafelek 4,72 Podział danych na zbiory: treningowy, walidacyjny i testowy

Ten blok kodu:

Dzieli dane na trzy zbiory: treningowy (70%), walidacyjny (10%) i testowy (20%).

Wydziela klasy na podstawie nazw plików.

Kopiuje obrazy do nowych folderów data_split/train, val, test, tworząc wewnątrz katalogi klas.

Dzięki temu dane są uporządkowane, a każda klasa ma swój katalog w każdym zbiorze – gotowe do trenowania modelu.
"""

from sklearn.model_selection import train_test_split
import shutil

def prepare_split_from_filenames(dataset_path, output_path='data_split', test_size=0.2, val_size=0.1):
    output_path = Path(output_path)
    if output_path.exists():
        shutil.rmtree(output_path)
    output_path.mkdir(parents=True, exist_ok=True)

    all_images = list((dataset_path / "images" / "images").glob("*.jpg"))
    class_to_images = {}
    for img in all_images:
        cls = extract_class_name(img.name)
        class_to_images.setdefault(cls, []).append(img)

    for cls, files in class_to_images.items():
        train_val, test = train_test_split(files, test_size=test_size, random_state=42)
        train, val = train_test_split(train_val, test_size=val_size, random_state=42)

        for split, images in zip(['train', 'val', 'test'], [train, val, test]):
            (output_path / split / cls).mkdir(parents=True, exist_ok=True)
            for img_path in images:
                shutil.copy(img_path, output_path / split / cls / img_path.name)

prepare_split_from_filenames(dataset_path)

"""### 🟩Kafelek 6 Wizualizacja przykładowych obrazów z podziału (sample)

Ten blok kodu odpowiada za wizualną walidację danych. Co robi?

Wybiera losowo n obrazów ze wskazanego folderu (train, val, test).

Wyświetla je w jednym rzędzie jako mini-galerię.

Dodaje nazwę klasy nad każdym zdjęciem.**pogrubiony tekst**
"""

import matplotlib.pyplot as plt
from PIL import Image
import random

def show_sample_images(data_path, num_images=6):
    data_path = Path(data_path)
    images = list(data_path.glob("*/*"))
    sample_imgs = random.sample(images, num_images)

    fig, axes = plt.subplots(1, num_images, figsize=(15, 5))
    for img_path, ax in zip(sample_imgs, axes):
        img = Image.open(img_path)
        ax.imshow(img)
        ax.set_title(img_path.parent.name)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

show_sample_images("data_split/train")

"""### 🟩 Kafelek 7 – Stworzenie własnego Datasetu


Ten blok kodu tworzy własną klasę Dataset w PyTorchu, co jest wymagane do ładowania danych przy trenowaniu modelu.

Co się tu dzieje?

CatDogDataset:

Przechodzi przez wszystkie obrazy w podanym folderze (data_split/train),

Zapamiętuje ścieżki i ustawia transformacje (np. zmiana rozmiaru, konwersja do tensora),

W __getitem__ otwiera obraz, przekształca go i zwraca razem z nazwą klasy (etykietą).

transform:

Ujednolica wymiary wszystkich obrazów do (224, 224),

Zamienia obraz na tensor (czyli format zrozumiały dla PyTorcha).

DataLoader:

Dzieli dane na paczki (batch_size=16) i losuje je w kolejności (shuffle=True),

Dzięki temu model w przyszłości będzie mógł je uczyć w sposób losowy i efektywny.


"""

from PIL import Image
from pathlib import Path
from sklearn.preprocessing import LabelEncoder
import torchvision.transforms as T
from torch.utils.data import DataLoader, Dataset

# LabelEncoder
all_labels = [p.parent.name for p in Path("data_split/train").glob("*/*")]
le = LabelEncoder()
le.fit(all_labels)
num_classes = len(le.classes_)

# Dataset
class EncodedDataset(Dataset):
    def __init__(self, root_dir, transform=None, encoder=None):
        self.root_dir = Path(root_dir)
        self.img_paths = list(self.root_dir.glob("*/*"))
        self.transform = transform
        self.encoder = encoder

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path = self.img_paths[idx]
        image = Image.open(img_path).convert("RGB")
        label = img_path.parent.name
        if self.transform:
            image = self.transform(image)
        label_encoded = self.encoder.transform([label])[0]
        return image, label_encoded

# Transformacje
train_transform = T.Compose([
    T.Resize((224, 224)),
    T.RandomHorizontalFlip(),
    T.RandomRotation(15),
    T.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
    T.ToTensor(),
    T.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

val_transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
    T.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])
])

# Loadery
train_dataset = EncodedDataset("data_split/train", train_transform, le)
val_dataset = EncodedDataset("data_split/val", val_transform, le)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

"""### 🟩 Kafelek 8 – Wyświetlenie batcha obrazów z DataLoadera
Ten blok kodu:

Pobiera pierwszy batch (partię) obrazów z train_loadera (czyli 16 obrazków, jeśli batch_size=16),

Dla każdego obrazu:

`
Wyświetla obraz z etykietą (czyli nazwą klasy: np. Abyssinian, Bombay, american_pit_bull_terrier),

Umieszcza wszystko w siatce 4x4.
"""

import torch
def show_batch(loader, label_encoder=None):
    images, labels = next(iter(loader))

    # Odenormalizuj
    mean = torch.tensor([0.5, 0.5, 0.5]).view(3, 1, 1)
    std = torch.tensor([0.5, 0.5, 0.5]).view(3, 1, 1)
    images = images * std + mean

    fig, axes = plt.subplots(4, 4, figsize=(10, 10))
    for img, lbl, ax in zip(images, labels, axes.flatten()):
        img = img.permute(1, 2, 0).numpy()
        ax.imshow(img)
        if label_encoder:
            label_name = label_encoder.inverse_transform([lbl.item()])[0]
        else:
            label_name = str(lbl.item())
        ax.set_title(label_name)
        ax.axis("off")
    plt.tight_layout()
    plt.show()
show_batch(train_loader, le)

"""### 🟩 Kafelek 9 – Weryfikacja zbalansowania zbioru (tabela + wykres klas)

Ten blok kodu:

Zlicza, ile obrazów z każdej klasy znajduje się w zbiorze treningowym, walidacyjnym i testowym.

Tworzy z tego przejrzystą tabelę oraz wykres słupkowy.

Pozwala sprawdzić, czy dane są zbalansowane (czyli czy każda klasa ma podobną liczbę obrazów w każdym zbiorze).
"""

import matplotlib.pyplot as plt
from collections import Counter
import pandas as pd

def count_classes_in_split(split_path):
    split_path = Path(split_path)
    all_images = list(split_path.rglob("*.jpg"))
    class_counts = Counter([p.parent.name for p in all_images])
    return dict(class_counts)

# 🔢 Zliczenie klas dla każdego zbioru
train_counts = count_classes_in_split("data_split/train")
val_counts = count_classes_in_split("data_split/val")
test_counts = count_classes_in_split("data_split/test")

# 📊 Tworzenie tabeli pandas
df = pd.DataFrame({
    'train': train_counts,
    'val': val_counts,
    'test': test_counts
}).fillna(0).astype(int)

display(df.sort_index())

# 📈 Wykres słupkowy – rozkład klas
df.plot(kind='bar', figsize=(14, 6), title="Liczba obrazów na klasę w podziale na zbiory")
plt.xlabel("Klasa")
plt.ylabel("Liczba obrazów")
plt.tight_layout()
plt.show()

"""Kolejne Laby

"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models
import numpy as np

import torch
import torch.nn as nn
import torch.nn.functional as F

class SimpleCNN(nn.Module):
    def __init__(self, num_classes):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.adapt_pool = nn.AdaptiveAvgPool2d((7, 7))  # zapewnia stały wymiar

        self.fc1 = nn.Linear(64 * 7 * 7, 256)
        self.fc2 = nn.Linear(256, num_classes)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.adapt_pool(x)
        x = torch.flatten(x, 1)  # lepsze niż view()
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

show_batch(train_loader, le)

import matplotlib.pyplot as plt
from tqdm import tqdm
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def train_model(model, train_loader, val_loader, epochs=5, lr=0.001):
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)

    train_losses = []
    val_losses = []

    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        correct, total = 0, 0

        for images, labels in tqdm(train_loader, desc=f"Epoch {epoch+1}/{epochs}"):
            images, labels = images.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            correct += (predicted == labels).sum().item()
            total += labels.size(0)

        acc = correct / total
        train_losses.append(running_loss)
        print(f"Epoch {epoch+1}, Train Loss: {running_loss:.4f}, Train Accuracy: {acc:.4f}")

        # Walidacja
        model.eval()
        val_correct, val_total = 0, 0
        val_running_loss = 0.0
        all_preds, all_labels = [], []

        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                loss = criterion(outputs, labels)
                val_running_loss += loss.item()

                _, predicted = torch.max(outputs, 1)
                val_correct += (predicted == labels).sum().item()
                val_total += labels.size(0)

                all_preds.extend(predicted.cpu().numpy())
                all_labels.extend(labels.cpu().numpy())

        val_acc = val_correct / val_total
        val_losses.append(val_running_loss)
        print(f"Validation Loss: {val_running_loss:.4f}, Validation Accuracy: {val_acc:.4f}")

    # Wykres strat
    plt.figure(figsize=(10, 5))
    plt.plot(train_losses, label='Train Loss')
    plt.plot(val_losses, label='Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.title('Train vs Validation Loss')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Metryki walidacyjne
    print("\nMetryki walidacyjne:")
    print(f"Accuracy:  {accuracy_score(all_labels, all_preds):.4f}")
    print(f"Precision: {precision_score(all_labels, all_preds, average='weighted'):.4f}")
    print(f"Recall:    {recall_score(all_labels, all_preds, average='weighted'):.4f}")
    print(f"F1 Score:  {f1_score(all_labels, all_preds, average='weighted'):.4f}")

model = SimpleCNN(num_classes).to(device)
train_model(model, train_loader, val_loader, epochs=5, lr=0.001)

test_dataset = EncodedDataset("data_split/test", val_transform, le)
test_loader = DataLoader(test_dataset, batch_size=32)

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Ewaluacja na zbiorze testowym
y_true_test = []
y_pred_test = []

model.eval()
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs, 1)
        y_true_test.extend(labels.cpu().numpy())
        y_pred_test.extend(predicted.cpu().numpy())

print("\n📊 Metryki dla zbioru testowego:")
print(f"Accuracy:  {accuracy_score(y_true_test, y_pred_test):.4f}")
print(f"Precision: {precision_score(y_true_test, y_pred_test, average='weighted'):.4f}")
print(f"Recall:    {recall_score(y_true_test, y_pred_test, average='weighted'):.4f}")
print(f"F1-score:  {f1_score(y_true_test, y_pred_test, average='weighted'):.4f}")

cm = confusion_matrix(y_true_test, y_pred_test)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=False, fmt="d", cmap="Blues")
plt.title("Macierz pomyłek – zbiór testowy")
plt.xlabel("Predykcja")
plt.ylabel("Rzeczywista klasa")
plt.show()

import random
import torch
import matplotlib.pyplot as plt

def predict_and_show_random(dataset, model, encoder, num_images=6):
    model.eval()
    idxs = random.sample(range(len(dataset)), num_images)
    images, labels = zip(*[dataset[i] for i in idxs])

    images_tensor = torch.stack(images).to(device)

    # Odenormalizacja – przywrócenie obrazu do zakresu [0, 1]
    mean = torch.tensor([0.5, 0.5, 0.5]).view(1, 3, 1, 1).to(images_tensor.device)
    std = torch.tensor([0.5, 0.5, 0.5]).view(1, 3, 1, 1).to(images_tensor.device)
    images_tensor_vis = images_tensor * std + mean  # do wyświetlania

    with torch.no_grad():
        outputs = model(images_tensor)
        _, preds = torch.max(outputs, 1)

    fig, axes = plt.subplots(1, num_images, figsize=(15, 5))
    for i in range(num_images):
        img = images_tensor_vis[i].permute(1, 2, 0).cpu().numpy()
        ax = axes[i]
        ax.imshow(img)
        pred_label = encoder.inverse_transform([preds[i].cpu().item()])[0]
        true_label = encoder.inverse_transform([labels[i]])[0]
        ax.set_title(f"P: {pred_label}\nT: {true_label}")
        ax.axis("off")
    plt.tight_layout()
    plt.show()

predict_and_show_random(val_dataset, model, le)

from torchvision.models import resnet18

# Załaduj pretrenowany model
model = resnet18(pretrained=True)

# Zamroź wcześniejsze warstwy (opcjonalnie, dla szybszego treningu)
for param in model.parameters():
    param.requires_grad = False

# Zastąp warstwę końcową dopasowaną do liczby klas
model.fc = nn.Linear(model.fc.in_features, num_classes)

# Przenieś model na GPU/CPU
model = model.to(device)

train_model(model, train_loader, val_loader, epochs=5, lr=0.001)

# Użycie:
predict_and_show_random(val_dataset, model, le)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.plot(train_losses, label='Strata treningowa')
plt.plot(val_losses, label='Strata walidacyjna')
plt.xlabel('Epoka')
plt.ylabel('Wartość funkcji straty')
plt.title('Wartość funkcji straty w kolejnych epokach')
plt.legend()
plt.grid(True)
plt.show()

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Zakładając, że masz listy y_true (prawdziwe etykiety) i y_pred (predykcje modelu)
accuracy = accuracy_score(y_true, y_pred)
precision = precision_score(y_true, y_pred, average='weighted')
recall = recall_score(y_true, y_pred, average='weighted')
f1 = f1_score(y_true, y_pred, average='weighted')
cm = confusion_matrix(y_true, y_pred)

print(f"Dokładność (Accuracy): {accuracy:.4f}")
print(f"Precyzja (Precision): {precision:.4f}")
print(f"Czułość (Recall): {recall:.4f}")
print(f"F1-score: {f1:.4f}")
print("Macierz pomyłek:")
print(cm)